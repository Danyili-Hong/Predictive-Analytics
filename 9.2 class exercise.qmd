---
title: "ex06"
author: "Danyili Hong"
format:
  html:
    embed-resources: true
    code-tools: true
    code-fold: true
---

```{python}
#| echo: true
import numpy as np
import pandas as pd
import plotly.express as px
pd.options.plotting.backend = "plotly"
```

```{python}
#| echo: false
# Hack to make plotly work in RStudio
if 'r' in globals() and r['.Platform$GUI'] == "RStudio" and r['suppressMessages(requireNamespace("htmltools"))']:
  r[".GlobalEnv$to_html <- function(x) { print(htmltools::HTML(x)) }"] and None
  def show_plot(p): r.to_html(p._repr_html_())
else:
  def show_plot(p): return p
```

```{python}
from sklearn.datasets import fetch_openml
concrete = fetch_openml(data_id=4353)
concrete_all = concrete['data'].copy()

# clean up column names:
# remove everything after the first parenthesis,
# replace spaces with underscores
concrete_all.columns = [
    col.split('(', 1)[0].strip().replace(' ', '_').lower()
    for col in concrete_all.columns]
concrete_all = concrete_all.rename(columns={
    'concrete_compressive_strength': 'strength',
    'blast_furnace_slag': 'slag',
})
concrete_all.info()
```

```{python}
concrete_all.head()
```

```{python}
import plotly.express as px
px.histogram(concrete_all, x='strength', nbins=30)
```

```{python}
px.histogram(concrete_all, x='age', nbins=30)
```

```{python}
# Do we have duplicates of any mixtures that differ only in age and strength?
other_columns = [col for col in concrete_all.columns if col not in ['age', 'strength']]
concrete_all.groupby(other_columns, as_index=False).size().sort_values(by='size', ascending=False).head(10)
```

```{python}
concrete_all[other_columns].sum(axis=1).describe()
```

```{python}
from sklearn.model_selection import train_test_split

concrete_train, concrete_test = train_test_split(concrete_all, random_state=0, test_size=0.2)
print(f"{len(concrete_train)} training mixtures, {len(concrete_test)} test mixtures")
```

```{python}
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=0)
feature_columns = [col for col in concrete_train.columns if col != 'strength']
model = RandomForestRegressor()
model.fit(
    X=concrete_train[feature_columns],
    y=concrete_train['strength'])

concrete_test['predicted_strength'] = model.predict(
    X=concrete_test[feature_columns])
```

```{python}
# code to evaluate error using mae, mape, r2
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score

def evaluate(y_true, y_pred):
    return pd.Series({
        'MAE': mean_absolute_error(y_true, y_pred),
        'MAPE': mean_absolute_percentage_error(y_true, y_pred),
        'R^2': r2_score(y_true, y_pred),
    })

evaluate(concrete_test['strength'], concrete_test['predicted_strength'])
```

```{python}
concrete_test['error'] = concrete_test['strength'] - concrete_test['predicted_strength']
px.histogram(concrete_test, x='error', nbins=30)
```

```{python}
px.scatter(
    concrete_test,
    x='predicted_strength', y='error',
    trendline='ols',
    labels={
        'predicted_strength': 'Predicted Strength (MPa)',
        'error': 'Error (MPa)',
    },
)
```

```{python}
px.scatter(
    concrete_test,
    x='water', y='error', trendline='ols',
)
```

```{python}
concrete_test.sort_values(by='error').head(5)
```

```{python}
concrete_test.sort_values(by='error').tail(5)
```

